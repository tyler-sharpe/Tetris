import javax.imageio.ImageIO
import java.awt.Image
import java.awt.image.BufferedImage

plugins {
    id 'idea'
    id 'java'
}

wrapper.gradleVersion = '5.4.1'

task scaleImages(group: 'build', description: 'Scales down all image assets and writes them to the build directory') {
    File sourceDir = file('src/main/resources/images')
    File outputDir = new File(buildDir, 'resources/main/images')
    inputs.dir(sourceDir)
    outputs.dir(outputDir)

    // Prevents copying over unscaled images from resource folder
    sourceSets.main.resources.exclude 'images'

    doFirst {
        outputDir.mkdirs()

        for (sourceImage in sourceDir.listFiles()) {
            BufferedImage scaledImage = scaleImage(sourceImage, 60)
            File resultFile = new File(outputDir, sourceImage.name)
            ImageIO.write(scaledImage, 'png', resultFile)
        }
    }
}

processResources.dependsOn(scaleImages)

task jarWithAudio(type: GradleBuild, group: 'build') {
    startParameter.projectProperties.packageAudio = true
    tasks = ['jar']
}

task jarWithoutAudio(type: GradleBuild, group: 'build') {
    startParameter.projectProperties.packageAudio = false
    tasks = ['jar']
}

final String mainClass = 'com.github.tylersharpe.tetris.Main'
jar {
    boolean packageAudio = project.hasProperty('packageAudio') ? Boolean.parseBoolean(project.property('packageAudio').toString()) : true
    if (!packageAudio) {
        exclude 'audio'
        archivesBaseName += '-NoAudio'
    }

    manifest {
        attributes 'Main-Class': mainClass, 'Audio-Enabled': packageAudio
    }
}

task deploy(type: Copy, group: 'build', dependsOn: [jarWithAudio, jarWithoutAudio]) {
    from new File(buildDir, 'libs')
    into new File(System.getenv('USERPROFILE'), 'Development/bin')
}

task run(type: JavaExec) {
    main = mainClass
    systemProperty 'audio.enabled', System.getProperty('audio.enabled', 'true')
    classpath sourceSets.main.runtimeClasspath
}

private static BufferedImage scaleImage(File image, int desiredWidth) {
    BufferedImage buffImage = ImageIO.read(image)
    double scaleFactor = ((double) desiredWidth) / buffImage.width
    int desiredHeight = (int) (buffImage.height * scaleFactor)
    Image scaledImage = buffImage.getScaledInstance(desiredWidth, desiredHeight, Image.SCALE_SMOOTH)

    BufferedImage buffScaledImage = new BufferedImage(desiredWidth, desiredHeight, BufferedImage.TYPE_INT_ARGB)
    buffScaledImage.graphics.drawImage(scaledImage, 0, 0, null)
    buffScaledImage
}